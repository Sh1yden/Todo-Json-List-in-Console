# –ò–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫.
import json
from random import randint
import os
from pathlib import Path
from uuid import uuid4

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SAVE_DIR = Path("save/tasks")
SAVE_FILE = SAVE_DIR / "save.json"
DEFAULT_FILE = {"all_tasks": {}}
DEFAULT_TASK = {
    "task_name": "",
    "task_description": "",
    "task_status": "",
    "task_create_date": "",
    "task_priority": "",
    "task_deadline": "",
}


class TaskManager:
    """–ö–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è TODO LIST IN CONSOLE."""

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞.
    def __init__(self):
        # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á.
        self.tasks = {"all_tasks": {}}
        self._initialize_files()

    def _initialize_files(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        try:
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            SAVE_DIR.mkdir(parents=True, exist_ok=True)
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.
            if not SAVE_FILE.exists():
                self._save_to_file()
        except Exception as e:
            print(f"File initialization ‚ùåerror‚ùå: {e}")

    def _load_from_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(SAVE_FILE, "r") as f:
                self.tasks = json.load(f)
        except Exception as e:
            print(f"‚ùåError‚ùå loading data from a file: {e}")

    def _save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª."""
        try:
            with open(SAVE_FILE, "w") as f:
                # ensure_ascii=False –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
                json.dump(self.tasks, f, indent=2)  # , ensure_ascii=False)
        except Exception as e:
            print(f"‚ùåError‚ùå when saving data to a file: {e}")

    def view_all_tasks(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
        try:
            self._load_from_file()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ.
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
            if not self.tasks["all_tasks"]:
                print("\nTasks list is emptyüíî.")
                return

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ.
            print("\nCount of tasks: ", len(self.tasks["all_tasks"]))
            # –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Å–µ—Ö –∑–∞–¥–∞—á.
            # task_id = –∫–ª—é—á –≤ —Å–ª–æ–≤–∞—Ä–µ. task_data = –∑–Ω–∞—á–µ–Ω–∏–µ.
            for task_id, task_data in self.tasks["all_tasks"].items():
                print(f"\nTask ID: {task_id}")
                # –ó–∞–º–µ–Ω–∞ "task_" –Ω–∞ "" –∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ "_".
                # –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ for key, value.
                for key, value in task_data.items():
                    print(f"{key.replace("task_", "").capitalize()}: {value}")
        except Exception as e:
            print(f"‚ùåError‚ùå when viewing data from a file: {e}")

    def add_task(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
        try:
            self._load_from_file()
            task_id = str(uuid4())

            print("\nAdding new task:")
            # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
            new_task = {}
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ DEFAULT_TASK –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.
            for field in DEFAULT_TASK:
                new_task[field] = input(f"Enter {field.replace("task_", "")}: ")

            print("\nCurrent task data:")
            for key, value in new_task.items():
                print(f"{key.replace("task_", "").capitalize()}: {value}")

            if str(input("\nYou are sure? (y/N): ")).lower() == "y":
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á–∏.
                self.tasks["all_tasks"][f"task_id: {task_id}"] = new_task
                self._save_to_file()
                print("Task added ‚úîÔ∏èsuccessfully‚úîÔ∏è.")
            else:
                print("Task addition ‚ùåcanceled‚ùå.")
        except Exception as e:
            print(f"‚ùåError‚ùå adding a task: {e}")

    def update_task(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏."""
        try:
            self._load_from_file()
            self.view_all_tasks()

            print("\nUpdating a task:")
            # –í–≤–æ–¥ —Ç–æ–ª—å–∫–æ id –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –±–µ–∑ –ø—Ä–∏–ø–∏—Å–∫–∏ task_id: .
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å "task_id: ".
            task_id = str(
                "task_id: "
                + input(
                    "Enter the ID of the task you want to üóëÔ∏èdeleteüóëÔ∏è(not 'task_id: ', only number): "
                )
            )
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º id.
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
            if task_id not in self.tasks["all_tasks"]:
                print("Task id not found.")
                return

            print("\nCurrent task data:")
            for key, value in self.tasks["all_tasks"][task_id].items():
                # –ó–∞–º–µ–Ω–∞ "task_" –Ω–∞ "" –∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ "_".
                # –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ for key, value.
                print(f"{key.replace('task_', '').capitalize()}: {value}")

            print("\nEnter the new data for the task:")
            for field in DEFAULT_TASK:
                # –ó–∞–º–µ–Ω–∞ "task_" –Ω–∞ "" –∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ "_".
                new_value = input(
                    f"Enter new {field.replace('task_', '').capitalize()}: "
                )
                if new_value:
                    self.tasks["all_tasks"][task_id][field] = new_value

            self._save_to_file()
            print("\nTask updated ‚úîÔ∏èsuccessfully‚úîÔ∏è.")
        except Exception as e:
            print(f"‚ùåError‚ùå updating a task: {e}")

    def delete_task(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏."""
        try:
            print("\nüóëÔ∏èDeleting Menu:")
            print("1. üóëÔ∏èDelete All Tasks")
            print("2. üóëÔ∏èDelete Single Task")
            print("3. Back to Main Menu")

            choice = input("Enter your choice: ")

            if choice == "1":
                self.clear_all_tasks()
            elif choice == "2":
                print("\nSingle Task Delete:")
                print("1. üóëÔ∏èDelete by ID")
                print("2. üóëÔ∏èDelete by Name")
                print("3. Back to Main Menu")

                choice = input("Enter your choice: ")

                result = {}
                if choice == "1":
                    self._load_from_file()
                    self.view_all_tasks()

                    print("\nDeleting a task:")
                    # –í–≤–æ–¥ —Ç–æ–ª—å–∫–æ id –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –±–µ–∑ –ø—Ä–∏–ø–∏—Å–∫–∏ task_id: .
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å "task_id: ".
                    task_id = str(
                        "task_id: "
                        + input(
                            "Enter the ID of the task you want to üóëÔ∏èdeleteüóëÔ∏è(not 'task_id: ', only number): "
                        )
                    )

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º id.
                    # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
                    if task_id not in self.tasks["all_tasks"]:
                        print("Task id not found.")
                        return

                    print("\nCurrent task data:")
                    for key, value in self.tasks["all_tasks"][task_id].items():
                        # –ó–∞–º–µ–Ω–∞ "task_" –Ω–∞ "" –∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ "_".
                        # –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ for key, value.
                        print(f"{key.replace('task_', '').capitalize()}: {value}")

                    del self.tasks["all_tasks"][task_id]
                    self._save_to_file()
                    print("\nTask üóëÔ∏èdeletedüóëÔ∏è ‚úîÔ∏èsuccessfully‚úîÔ∏è.")
                elif choice == "2":
                    self._load_from_file()
                    self.view_all_tasks()

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É —Å–ª–æ–≤–∞—Ä—è —Å –∑–∞–¥–∞—á–∞–º–∏.
                    if self.tasks["all_tasks"] == {}:
                        print("There are no tasks.")
                        return

                    print("\nDeleting a task:")
                    # –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.
                    task_name = str(
                        input("Enter the name of the task you want to üóëÔ∏èdeleteüóëÔ∏è: ")
                    ).lower()
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –µ–≥–æ id.
                    result = {
                        id_: task
                        for id_, task in self.tasks["all_tasks"].items()
                        if task_name in task["task_name"].lower()
                    }

                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∑–∞–¥–∞—á–∏, —Ç–æ —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.
                    if result:
                        for i in result:
                            if i in self.tasks["all_tasks"]:
                                del self.tasks["all_tasks"][i]
                        print("\nTask üóëÔ∏èdeletedüóëÔ∏è ‚úîÔ∏èsuccessfully‚úîÔ∏è.")
                        self._save_to_file()
                    else:
                        print("No task found with the given name.")
            elif choice == "3":
                print("Backing to Main Menu...")
                return
            else:
                print("Invalid choice.")
                return
        except Exception as e:
            print(f"‚ùåError‚ùå deleting a task: {e}")

    def clear_all_tasks(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
        try:
            if str(input("\nYou are sure? (y/N): ")).lower() == "y":
                self.tasks["all_tasks"] = {}
                self._save_to_file()
                print("All tasks have been ‚úîÔ∏èsuccessfully‚úîÔ∏è üóëÔ∏èdeletedüóëÔ∏è.")
            else:
                print("Task deletion canceled.")
        except Exception as e:
            print(f"‚ùåError‚ùå deleting all tasks: {e}")

    def search_task(self):
        """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ id."""
        try:
            # print("In development!")
            self._load_from_file()
            print("\nüìùSearching a Task Menu:")
            print("1. üìùSearch by ID")
            print("2. üìùSearch by Name")
            print("3. üìùSearch by Status")
            print("4. Back to Main Menu")

            choice = input("Enter your choice: ")

            result = {}
            if choice == "1":
                # –í–≤–æ–¥ —Ç–æ–ª—å–∫–æ id –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –±–µ–∑ –ø—Ä–∏–ø–∏—Å–∫–∏ task_id: .
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å "task_id: ".
                task_id = str(
                    "task_id: "
                    + input(
                        "Enter the ID of the task you want to üìùsearchüìù(not 'task_id: ', only number): "
                    )
                )
                if task_id in self.tasks["all_tasks"]:
                    result[task_id] = self.tasks["all_tasks"][task_id]
            elif choice == "2":
                # –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.
                task_name = str(
                    input("Enter the name of the task you want to üìùsearchüìù: ")
                ).lower()
                result = {
                    id_: task
                    for id_, task in self.tasks["all_tasks"].items()
                    if task_name in task["task_name"].lower()
                }
            elif choice == "3":
                task_status = input(
                    "Enter the status of the task you want to üìùsearchüìù: "
                ).lower()
                result = {
                    id_: task
                    for id_, task in self.tasks["all_tasks"].items()
                    if task_status in task["task_status"].lower()
                }
            elif choice == "4":
                print("Backing to Main Menu...")
                return
            else:
                print("Invalid choice.")
                return

            if not result:
                print("No tasks found.")
                return

            print(f"üìùüîéSearch Results: {len(result)} task(s) found.")
            for task_id, task_data in result.items():
                print(f"\nTask ID: {task_id}")
                for key, value in task_data.items():
                    print(f"{key.replace('task_', '').capitalize()}: {value}")
        except Exception as e:
            print(f"‚ùåError‚ùå searching a task: {e}")

    def generate_test_tasks(self, count: int = 10):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)."""
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DEFAULT_TASK.
            for i in range(count):
                task_id = str(uuid4())
                # –ü—Ä–∏–∫–æ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ** –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ —Å–ª–æ–≤–∞—Ä—è DEFAULT_TASK.
                self.tasks["all_tasks"][f"task_id: {task_id}"] = {
                    **DEFAULT_TASK,
                    "task_name": f"Test task {randint(1, 10000)}",
                    "task_status": "test",
                }
            self._save_to_file()
            print(f"Generated {count} test tasks.")
        except Exception as e:
            print(f"‚ùåError‚ùå when generating test tasks: {e}")


def main_menu():
    manager = TaskManager()

    while True:
        print("\n" + "‚ò∞" * 20)
        print("TODO üìÉLIST IN TERMINAL")
        print("‚ò∞" * 20)
        print("Todo üìÉList Menu:")
        print("1. üëÄView All Tasks")
        print("2. ‚úíÔ∏èAdd Task")
        print("3. üîÑUpdate Task")
        print("4. üóëÔ∏èDelete Task Menu")
        print("5. üîçSearch Task")
        print("6. üé∞Generate Test Tasks")
        print("7. Exit")

        choice = input("\nEnter your choice: ")

        if choice == "1":
            manager.view_all_tasks()
        elif choice == "2":
            manager.add_task()
        elif choice == "3":
            manager.update_task()
        elif choice == "4":
            manager.delete_task()
        elif choice == "5":
            manager.search_task()
        elif choice == "6":
            count = input("\nHow many tasks should I generate? (default 10): ")
            manager.generate_test_tasks(int(count) if count.isdigit() else 10)
        elif choice == "7":
            if str(input("\nYou are sure? (y/N): ")).lower() == "y":
                print("\nExiting the program...")
                break
            else:
                print("Returning to the main menu...")
        else:
            print("\n‚ùåWrong choice‚ùå. Try again.")
            return


if __name__ == "__main__":
    main_menu()
